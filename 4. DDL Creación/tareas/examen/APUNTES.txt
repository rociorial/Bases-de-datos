COMPROBAR EXISTENCIA Y BORRADO
==============================
- Base de datos:
IF EXISTS (SELECT * FROM SYS.databases WHERE name='RIOS')
BEGIN
	DROP DATABASE RIOS
END

- Tabla: 
IF EXISTS (SELECT * FROM SYS.tables WHERE name='RIO')
BEGIN
	DROP TABLE RIO
END



MOSTRAR INFO DE LA BASE DE DATOS
================================

exec sp_helpdb RIOS
exec sp_help RIO
exec sp_helpconstraint RIO


CONSTRAINT: regla o restricción
===============================

1. PRIMARY KEY: asegura que cada fila tenga valor único y no nulo en la columna
que define a la clave primaria

-- CONSTRAINT PK_RIO PRIMARY KEY (Codigo)


2. FOREIGN KEY: asegura que los valores en una columna coincidan con los de una
clave primaria o única en otra tabla

-- CONSTRAINT FK_Rio_Pais FOREIGN KEY (PaisID) REFERENCES Pais(ID)

Como los valores tienen que coincidir, si se elimina uno, el otro también, y lo
mismo con las actualizaciones:

ON DELETE CASCADE
ON UPDATE CASCADE


3. CHECK: limimta valores que una columna puede almacenar, permitiendo sólo los
que cumplen una condición definida

-- CONSTRAINT CHK_Edad CHECK (Edad >= 0 AND Edad <= 120)
-- CONSTRAINT CK_VERTIENTE_RIO CHECK (Vertiente IN ('Mediterranea', 'Atlantica'))
-- CONSTRAINT CK_CODIGORIO CHECK (Codigo LIKE '[0-9][0-9][0-9]-[a-zA-Z][AP]')
-- CONSTRAINT CK_LugarFinTramo CHECK (LugarFin != LugarInicio)


4. UNIQUE: asegura que los valores de una columna sean únicos dentro de la tabla
(sin duplicados)

-- CONSTRAINT UQ_Nombre UNIQUE (Nombre)


5. DEFAULT: define un valor por defecto que se le asigna a una columna cuando
no se especifica ningún valor. El DEFAULT tiene que ir junto a la definición
de la columna siempre

-- Vertiente VARCHAR(15) NULL
--      CONSTRAINT DF_VertienteRio DEFAULT 'Mediterraneo'

Las CONSTRAINT podemos eliminarlas con ALTER TABLE ... DROP CONSTRAINT ...



En SQL Server también existen las propiedades:

1. IDENTITY: genera valores automáticos e incrementarles para una columna 
numérica

-- CodEspecie INT IDENTITY (1, 5)
En este ejemplo, se inicia en uno e incrementa de 5 en 5

2. NULL / NOT NULL: definen si se permiten o no valores nulos



TIPOS DE DATOS
==============

1. INT: entero
2. VARCHAR(n): almacena texto de longitud variable (n)
3. CHAR(n): cadena de caracteres con longitud fija (n)
4. TEXT: almacenar texto muy largo, como descripciones
5. DATE: almacena solo la fecha (YYYY-MM-DD)
6. DATETIME: almacena fecha y hora (YYYY-MM-DD HH:MM:SS)
7. FLOAT: números con decimales y precisión flotante
8. DECIMAL(p, s): números (n) con decimales (s) y precisión fija
9. BIT: booleano, verdadero (1) o falso (0)
10. BINARY: datos binarios de longitud fija: imágenes, archivos...



CREACION DE TABLAS INTERMEDIAS
==============================

Pepa manda crear las tablas en un orden.
Imaginamos las tablas TRAMO, ESPECIETRAMO y ESPECIE

En ese orden, crearíamos TRAMO sin problema, pero en ESPECIETRAMO, los atributos
forman parte de TRAMO y ESPECIE, por lo que no podemos crear esa tabla entera si
ESPECIE no está declarada. Construiríamos ESPECIETRAMO con los atributos de TRAMO
y después, al construir ESPECIE, añadiríamos los atributos faltantes.

-- 1. Agregar codEspecie y establecer la clave foránea
ALTER TABLE ESPECIETRAMO 
	ADD codEspecie INT NOT NULL,
	CONSTRAINT FK_ESPECIE_ESPECIETRAMO FOREIGN KEY (CodEspecie) REFERENCES ESPECIE(CodEspecie)
		ON UPDATE CASCADE
		ON DELETE CASCADE
		
-- 2. Eliminar la clave primaria existente
ALTER TABLE ESPECIETRAMO 
	DROP CONSTRAINT PK_ESPECIETRAMO
	
-- 3. Crear la nueva clave primaria compuesta
ALTER TABLE ESPECIETRAMO 
	ADD CONSTRAINT PK_ESPECIETRAMO PRIMARY KEY (CodRio, Numero, CodEspecie)



MODIFICACIONES EN TABLAS
========================

1. Borrar un campo de una tabla
Tenemos que borrar las restricciones para no violar las que tienen claves primarias,
claves foráneas o DEFAULT, CHECK y UNIQUE

2. NO UPDATE NO ACTION
   NO DELETE NO ACTION
Se usan para no permitir el borrado ni la actualización de tablas

3. Imprimir por pantalla 
PRINT 'Hola Mundo ' 
